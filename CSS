know before starting-->
color meaning -> http://vanseodesign.com/web-design/color-meaning/
**set default fon-size in html so other elments an use rem measuremt 
*responsive units re %,em and rem .px is not responsive so dont use it. (css grids -you can use 'fr'. fraction stops overflow of grid items)
*to make one item go into other use margin-top or margi-bottom with negative values like -10%
*golden rule--you not always change the style of an elment or div --instead change its parent -example--if delisheats..sowing text inside an image on landing page..her eu need to modify the div in which these 2 texts appear.
*in css how we work is we put a DIV INSIDE DIV AND INSIDE DIV and style them ..itlike style parent div to be center so all child elments will be in center.
*pixel size will be same on browser and laptop -> so use media queries or %
*have no more than 2 fonts ..a good practice to limit the number of typefaces used on a web page to 2 or 3.
*reset your default browser styles initally by setting-The code in the example above resets the default margin and padding values of all HTML elements. It is often the first CSS rule in an external stylesheet.
* {
  margin: 0;
  padding: 0;
}
*DEFAULT BOX MODEL USED IS "content-box;"(adds all and increases size) //BAD AS IT adds 'width+padding+order= actual rendered width" //https://s3.amazonaws.com/codecademy-content/courses/web-101/htmlcss1-diagram__contentbox.svg
Fortunately, we can reset the entire box model and specify a new one: border-box.
* {
  box-sizing: border-box; 
}
-->default fallback fonts
html {
  font-size: 16px;
  font-family: "Arial", sans-serif;
}
You can add custom fonts also.to do this.
https://www.fontsquirrel.com/
go to above link download a font and add it to your project folder and in css give it a name and import it like below-
@font-face{
  font-family: 'Glegoo';
  src: url("../fonts/Glegoo-Regular.ttf") format('truetype');
}

OR

goto ->https://fonts.google.com/?query=space+m&selection.family=Space+Mono:400,700
select a font and  customize it in the popup..
now copy the <link> and add in html head.. finally use the give 'specify in css' and add to css where you need.
OR GOTO THE URL
https://fonts.googleapis.com/css?family=Space+Mono:400,700
copy all latin ITEMS
AND PLACE THEM AT FIRST IN CSS--OR ELSE IT WONT WORK..MAKE SURE YOU REMOVE THE HTML LINK TAG THEN
-->
https://s3.amazonaws.com/codecademy-content/courses/web-101/htmlcss1-diagram__borderbox.svg
In this box model, (fits everything inside height and width)the height and width of the box will remain fixed. The border thickness and padding will be included inside of the box, which means the overall dimensions of the box do not change.
**A browser will render the elements of an HTML document that has no CSS from left to right, top to bottom, in the same order as they exist in the document. This is called the flow of elements in HTML.
*if you need ur elment to have space in top or be at a position from to then use position:relative along with top,left,right,bottom...dont use padding or other things,
*This technique is often used for navigation bars on a web page. //position:fixed
*if you set nav bar to psoiton:fixed" then your body or next elments should be '  position:relative;top:200px; ' because u fixed your nav header-so other elments needs to be realative to it and 200px down of it,
*if you want elments on left and right like table u need to rely on display:inline, block, and inline-block..this tells if a elment can share its left or right space with others..or should it take all horixontal space
*add header /footer insider body
** desing a web page->
menu on top ->use ul li with display:inline-block.along with width and height
add the next section like 'title' with some offset like 20px down of menu on top.
***REMBER POSITION ->IT TELLS HOW A ELMENT SHOULD BE THERE,LOCATED ON  ascreen...you can also ue 'top' offset when needed from top..for right or left use float.
**MUST KNO >POSITIOM,DISPLAY,Z-INDEX
https://stackoverflow.com/questions/3225891/what-does-the-greater-than-sign-css-selector-mean
css :before
:last-child
serif vs sans-serif(sans serif has flat edges)-https://s3.amazonaws.com/codecademy-content/courses/web-101/htmlcss1-diagram__fontanatomy.svg

ANIMATION ->
.btn:hover, .nav ul li:hover {
  background: #117bff;
  cursor: pointer; 
  transition: background .5s;  
}

->
.first ->to target first elment
.photo.first {
  position: relative;
  top: -2.77rem;
  margin-bottom: 1.67rem;
}

------

Text - typeface,size,weight,align
Font-Family:arial | Helvetica | Georgia (DEFAULT IS TIMES NEW ROMAN)
-->
by default each machine has This small set includes serif fonts like Times New Roman and sans-serif fonts like Arial.
To use fallback fonts, the following syntax is required:
**  font-family: "Garamond", "Times", serif;
Use the Garamond font for all <h1> elements on the web page.
If Garamond is not available, use the Times font.
If Garamond and Times are not available, use any serif font pre-installed on the user's computer.
-->


Font-Size:10px
Font-Weight:bold |normal (DEFALT IS NORMAL) || 400(default) | 700(bold) | 300(light)
text-align:left |center | right
font-style:italic | normal
word-spacing: 0.3em; (The default amount of space between words is usually 0.25em)
letter-spacing: 0.3em; (kerning)
text-transform: uppercase;
line-height :1.4(unitless value is prefered as it is mobile compatable) (https://s3.amazonaws.com/codecademy-content/courses/web-101/htmlcss1-diagram__leading.svg) (This property modifies the leading of text.)

-----
color-foreground and background color
color: Foreground color is the color that an element appears in
background-color: Conversely, when a heading is styled so that its background appears yellow
color:Azure

--------
opacity->Opacity is the measure of how transparent an element is. It's measured from 0 to 1, with 1 representing 100%, or fully visible and opaque, and 0 representing 0%, or fully invisible.
you can set opacity for color too
color: rgba(234, 45, 98, 0.33);
color: hsla(34, 100%, 50%, 0.1);
color: transparent;

  color:rgba(0,0,0,0.7); // this can be applied to h1,h2, or anything to make it transparent to its background
--------
visibility:hidden | visible //however, will not be visible on the web page, but the space reserved for it will.
display: none // will be completely removed from the web page.
---------------> 
image -> VERY NEW -> CSS CAN CHNAGE BACKGROUND OF A ELMENT..LIKE YOU CAN TELL ALL H1 TAGS HAVE A IMAGE BACKGOUND.. //APPLY TO CLASS DIV
background-image
.main-banner {
  background-image: url("images/mountains.jpg");
}
url- https://s3.amazonaws.com/codecademy-content/courses/learn-css-selectors-visual-rules/hypnotize_bg.png

image height to make it smaller or bigger
height:150px;

align image to center
img{
  display: block;
  margin:0 auto;
  width: 100%;
}
align anything in center needs 2 things one being width and another being margin..if you dont set width then paretn width will be taken..u tell margin to leave top adn bottom as 0 and right and left as auto
div.headline {
  width: 400px;
  margin: 0 auto;
}


ul->list items will show wiht rounds if you want square you can do by below
  list-style: square;
//to get this working you need to call classname of li with the tag of ul ex- .ingreditens li{list-style:square}
-------------->
BOX PROPERTIES->
every html elment is inside a box and each box has below values that cna be modified->
https://s3.amazonaws.com/codecademy-content/courses/freelance-1/unit-4/diagram-boxmodel.svg

--->
height ,Width -> specifies the width and height of the content area.
height:30px;width:20px //sets the box hwight and width. remmber every html elment is isnide a box

Because a web page can be viewed through displays of differing screen size, the content on the web page can suffer from those changes in size. To avoid this problem, CSS offers two properties that can limit how narrow or how wide an element's box can be sized to.

min-width — this property ensures a minimum width of an element's box./cant go beyong that r reduce beyond that
max-width — this property ensures a maximum width of an element's box.

  min-width:200px;
  max-width:800px;
  min-height:200px;
  max-height:300px;
-->
padding ->specifies the amount of space between the content area and the border.
padding-top
padding-right
padding-bottom
padding-left
ex:   padding: 6px 11px 4px 9px; //top right bottm left
  padding: 5px 10px; //5px - top and bottom and 10px lef and right

-->
border ->specifies the thickness and style of the border surrounding the content area and padding.
The default border is "medium none color" // where color is the current color of the element.
Borders can be set with a specific width, style, and color
width :thin | medium | thick | 3px
style : none | dotted | solid | https://developer.mozilla.org/en-US/docs/Web/CSS/border-style#Values
color  : https://developer.mozilla.org/en-US/docs/Web/CSS/color_value
ex-
p {
  border: 3px solid coral;
}
border-radius: 100%; // used for setting the curvature of border
-->
margin ->specifies the amount of space between the border and the outside edge of the element.Margin refers to the space directly outside of the box. The margin property is used to specify the size of this space
margin-top
margin-right
margin-bottom
margin-left
ex-   margin: 6px 10px 5px 12px; //top right bottm left
  margin: 6px 12px; //6px-top and bottom //12px-right left

p {
  border: 1px solid aquamarine;
  margin: 20px;
}
The code in the example above will place 20 pixels of space on the outside of the paragraph's box on all four sides. This means that other HTML elements on the page cannot come within 20 pixels of the paragraph's border.

IMP RULE ->
IF YOU DIVS ARE TOP AND BOTTOM -> ASSUME THEY HAVE MARGINS ONE WITH 10 AND OTHER 20 -> NOW THE SPACE BETWEEN THEM IS 20PX ->THE ONE WITH LARGETS WINS. WEARS FOR LEFT AND RIGHT IT IS ADDED
https://s3.amazonaws.com/codecademy-content/courses/freelance-1/unit-4/diagram-verticalmargins.svg

-->
overflow: if contents in a box overflow then you neex to tell to either give a scroll or hide it or show it

  overflow:scroll | hidden | visible;


------------------------------------------------------------------------------------------
FLOW OF HTML ->A browser will render the elements of an HTML document that has no CSS from left to right, top to bottom, in the same order as they exist in the document. This is called the flow of elements in HTML.

five properties for adjusting the position of HTML elements in the browser:
position
display
z-index
float
clear


--->
POSITION : static (the default value-no nee to specify)| relative (used to align with the previous elment like come after it)| absolute | fixed(for nav headers)
The default position of an element can be changed by setting its position property---


position:relative //used in conjuction with others... (the position of elmenent is set relative to where it should be. AKA give sizes like top,bottom and will apply it to this elemnt)..when u use this u alos need to specify where and how this should be using other css properites like top,left,right,bottom
top - moves the element down.
bottom - moves the element up.
left - moves the element right.
right - moves the element left.
Example->
.box-bottom {
  position: relative;
  top: 20px;
  left: 50px;
  right:20px;
  bottom:30px;
}
//Units for offset properties can be specified in pixels, ems, or percentages


-->
.card {
  position: relative;
  top: 10px;
}
Position the .card element 10 pixels lower than its default position.position: relative will allow offsets like top to start from the element's default position, not the position of its parent elements.


----------
position:absolute (When an element's position is set to absolute all other elements on the page will ignore the element and act like it is not present on the page. The element will be positioned relative to its closest positioned parent element.)
**will position an element in relation to the nearest non-static element?
https://s3.amazonaws.com/codecademy-content/courses/web-101/unit-7/alex-clark-experiment/absolute.gif
IMP---> ABSOLUTE MEANING IT WILL BE SET REALTIVE TO AN ELMENT CLOSER TO IT----NOT A GREAT OPTION TO USE
top - moves the element down.
bottom - moves the element up.
left - moves the element right.
right - moves the element left.
Example->
.box-bottom {
  position: absolute;
  top: 20px;
  left: 50px;
  right:20px;
  bottom:30px;
}
//Units for offset properties can be specified in pixels, ems, or percentages
---------
position:fixed (When an element's position is set to absolute, as in the last exercise, the element will scroll with the rest of the document when a user scrolls.

We can fix an element to a specific position on the page (regardless of user scrolling) by setting its position to fixed.)
https://s3.amazonaws.com/codecademy-content/courses/web-101/unit-7/alex-clark-experiment/fixed.gif
IMP---> ABSOLUTE MEANING IT WILL BE SET REALTIVE TO AN ELMENT CLOSER TO IT----NOT A GREAT OPTION TO USE
top - moves the element down.
bottom - moves the element up.
left - moves the element right.
right - moves the element left.
Example->
.box-bottom {
  background-color: DeepSkyBlue;
  position: fixed;
  top: 20px;
  left: 50px;
}
//Units for offset properties can be specified in pixels, ems, or percentages
-------------------------------------------------
z-index --- show something forword or backword using this z-index.
IMP--IF USING z-index you must include position:realtive or anothing other than static
https://s3.amazonaws.com/codecademy-content/courses/web-101/unit-7/alex-clark-experiment/z-index.png
.box-top {
  background-color: Aquamarine;
  position: relative;
  z-index: 2;
}

.box-bottom {
  background-color: DeepSkyBlue;
  position: absolute;
  top: 20px;
  left: 50px;
  z-index: 1;
}
In the example above, we set the .box-top position to relative and the z-index to 2. We changed position to relative, because the z-index property does not work on static elements. The z-index of 2 moves the .box-top element forward, because it is greater than the .box-bottom z-index, 1. See the example image below:

--------------------------
display :flex (show items on right in boxes)|inline, block, and inline-block (in simple decide if something should be display in one horizontal line or if it cna shrae that line with other items..example -diplsay table with 2 ccolumns)
Every HTML element has a default display value that dictates if it can share horizontal space with other elements. Some elements fill the entire browser from left to right regardless of the size of their content. Other elements only take up as much horizontal space as their content requires and can be directly next to other elements.
The default display for some tags, such as <em>, <strong>, and <a>, is called inline
nline elements have a box that wraps tightly around their content, only taking up the amount of space necessary to display their content and not requiring a new line after each element. The height and width of these elements cannot be specified in the CSS document.
For example, the text of an anchor tag (<a>) will, by default, be displayed on the same line as the surrounding text, and it will only be as wide as necessary to contain its content. inline elements cannot be altered in size with the height or width CSS properties.

To learn more about <em>inline</em> elements, read <a href="#">MDN documentation</a>.
-->
display:inline --you cant set width and height
take what space is needed..dont occupy entire horizontal space--elments can appear left and right ..next to each other
***************does not start a new line and cannot be sized using the height and width properties.
-->
display:block () --you can set width
Some elements are not displayed in the same line as the content around them. These are called block-level elements. These elements fill the entire width of the page by default, but their width property can also be set. Unless otherwise specified, they are the height necessary to accommodate their content.
https://developer.mozilla.org/en-US/docs/Web/HTML/Block-level_elements
*Elements that are block-level by default include all levels of heading elements (<h1> through <h6>), <p>, <div> and <footer>.
************starts a new line and can be sized using the height and width properties.

--->
display:inline-block(used for list items in ordeed/unorderd lists) -you can set wdth and height..
Ex: shows menu items next to each other in a block (ONE TWO THREE)
Inline-block display combines features of both inline and block elements. Inline-block elements can appear next to each other and we can specify their dimensions using the width and height properties. Images are the best example of default inline-block elements.
.rectangle {
  display: inline-block;
  width: 200px;
  height: 300px;
}
****does not start a new line and can be sized using the height and width properties.
--
display:flex (ouptwill be like boxex next to each other like -> |1|2|3|4|)
https://css-tricks.com/snippets/css/a-guide-to-flexbox/
        <div class="swatch saturation">
          <div class="color-1"></div>
          <div class="color-2"></div>
          <div class="color-3"></div>
          <div class="color-4"></div>
          <div class="color-5"></div>
        </div>
		
		__--> css
		.swatch saturation  {
.color .swatch {
  display: flex;
  height: 6.6875rem;
  border: 10px solid #e6e6e6;
  margin-bottom: 1.25rem;
}
}
		
------------
Float:right (works only with static and realtive positioned elments) (Floated elements must have a width specified)
So far, you've learned how to specify the exact position of an element using offset properties. If you're simply interested in moving an element as far left or as far right as possible on the page, you can use the float property.

The float property can be set to one of two values:

left - this value will move, or float, elements as far left as possible.
right - this value will move elements as far right as possible.

.box-bottom {
  background-color: DeepSkyBlue;
  float: right;
}
==>
when u use float u run into issues like next elments will come bump into this elment. s use CLEAR
CLEAR (if you see other elemnts bumping into this elment..then goto other elment and set its clear to right,left,both,none)
The float property can also be used to float multiple elements at once. However, when multiple floated elements have different heights, it can affect their layout on the page. Specifically, elements can "bump" into each other and not allow other elements to properly move to the left or right.

The clear property specifies how elements should behave when they bump into each other on the page. It can take on one of the following values:

left — the left side of the element will not touch any other element within the same containing element.
right — the right side of the element will not touch any other element within the same containing element.
both — neither side of the element will touch any other element within the same containing element.
none — the element can touch either side.
--------
Button ->
.btn {
  color: #fff;
  background: #000;
  padding: 20px 60px;
  text-decoration: none; 
  transition: background .5s; 
}
.btn:hover, .nav ul li:hover {
  background: #117bff;
  cursor: pointer; 
  transition: background .5s;  
}

.button {
  border-radius: 4px;
  color: #05A8AA;
  display: block;
  font-weight: 700;
  width:200px;
  padding:20px;
  margin:40px auto;
  border:1px solid blue;
}
.button:hover {
  background-color: #05A8AA;
  border: 1px solid #05A8AA;
  color: #FFF;
}


Paragarph->
p {
  color: AliceBlue;
  line-height: 1.3em;
  text-align: left;
  width: 100%;
  font-family:Helvetica;
  font-size:18px;
}

Top Menu ->
.nav { 
  background: #000;
  height: 80px; 
  width: 100%;
}

.nav ul {
  height: 80px;
  list-style: none;
  margin: 0 auto; 
  padding: 0;
}

.nav ul li {
  color: #fff;
  display: inline-block; 
  height: 80px;
  line-height: 80px; 
  list-style: none;
  padding: 0 10px;
  transition: background .5s; 
}


Font Family -> chnage typerface of text 
font-family:Arial
When setting typefaces on a web page, keep the following points in mind:

The font specified in a stylesheet must be installed on a user's computer in order for that font to display when a user visits the web page.
The default typeface for all HTML elements is Times New Roman. You may be familiar with this typeface if you have ever used a formatted word processor. If no font-family attribute is defined, the page will appear in Times New Roman.
It's a good practice to limit the number of typefaces used on a web page to 2 or 3. This helps the page load faster in some cases and is usually a good design decision.
When the name of a typeface consists of more than one word, it's a best practice to enclose the typeface's name in quotes, like so:
h1 {
  font-family: "Courier New";
}
------------------>




Adding css ->
  <link href="./style.css" type="text/css" rel="stylesheet">
  href-link
  type- css
  relation -rel between html and css
  
  
COlors->
  color:maroon;
  color:teal;
  
Ways to call child html elements
1.)Define the top tag with a class and then call child elments with html tags like below
<h1 class="title">
  <h2>
   name
   </h2>
   </h1>
css- .title h1 { color:green}


CSS WAYS -
CSS can select HTML elements by tag, class, or ID.
id selectors
class selectors
descendant selectors
chained or qualified selectors
you can also give 2 class like class="makebold makeitalic" and code them in css seperatly like .makebold{} .makeitalic{}

!important // p {color: blue !important;} // DANGER (moslty no use)-ALL GLOBAL P ELMENTS COLOR IS CHANGED..if you use this all child elments inside another will be effected too ex- .title p {}
#id {} // <p id="title"> // #title {color:red}
.classname {} // <p class="title"> // .title {color:red}
.htmltag {} //<p> // p {color:red}
.classname tag {} //Used for elments in a list like LI in a UI
tag .classname {}
h1, .menu {} // Here we are just telling both tags and class will have same styles -rather than writing 2 seperate items like h1{} .menu{}



--> this entire block is called css rule set
h1 {
  color: #FFF;
  font-size: 2em;
  padding-top: 100px;
  width: 100%;
}

color ->css property
#FFF -> css value
always seperated ;

-----------
now here u include a image and add a tint
#banner {
  position: relative;
  height: 43.75rem;
  padding: 0 25%;
  background: url("	https://s3.amazonaws.com/codecademy-content/courses/freelance-1/unit-6/banner.png") center center no-repeat;
  background-size: cover;
  text-align: center;
}

#banner:before { /* Orange Overlay */
  position: absolute;
  content: "";
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color:rgba(255,128,0,0.2);
}

----------------------------------

BOX MODEL->
width
height
padding
border
margin
overflow

The box model comprises a set of properties used to create space around and between HTML elements.
The height and width of a content area can be set in pixels or percentage.
Borders surround the content area and padding of an element. The color, style, and thickness of a border can be set with CSS properties.
Padding is the space between the content area and the border. It can be set in pixels or percent.
Margin is the amount of spacing outside of an element's border.
Horizontal margins add, so the total space between the borders of adjacent elements is equal to the sum of the right margin of one element and the left margin of the adjacent element.
Vertical margins collapse, so the space between vertically adjacent elements is equal to the larger margin.
margin: 0 auto horizontally centers an element inside of its parent content area, if it has a width.
The overflow property can be set to display, hide, or scroll, and dictates how HTML will render content that overflows its parent's content area.
The visibility property can hide or show elements.

------>
  display: inline-block;

-------------------------
Review: Layout
The position property allows you to specify the position of an element in three different ways.
When set to relative, an element's position is relative to its default position on the page.(like instead of showing where it should be..show it with new top settings as an exmaple)
When set to absolute, an element's position is relative to its closest positioned parent element. It can be pinned to any part of the web page, but the element will still move with the rest of the document when the page is scrolled.
When set to fixed, an element's position can be pinned to any part of the web page. The element will remain in view no matter what.
The z-index of an element specifies how far back or how far forward an element appears on the page when it overlaps other elements.
The display property allows you control how an element flows vertically and horizontally a document.
inline elements take up as little space as possible, and they cannot have manually-adjusted width or height.
block elements take up the width of their container and can have manually-adjusted heights.
inline-block elements can have set width and height, but they can also appear next to each other and do not take up their entire container width.
The float property can move elements as far left or as far right as possible on a web page.
You can clear an element's left or right side (or both) using the clear property.
When combined with an understanding of the box model, positioning can create visually appealing web pages. So far, we've focused on adding content in the form of text to a web page. In the next unit, you'll learn how to add and manipulate images to a web page.
---------------

Color->
https://developer.mozilla.org/en-US/docs/Web/CSS/color_value

Can be given in 3 ways for FOREGROUND OR BACKGROUND-->
+Named colors (147 colors only)— English words that describe colors, also called keyword colors
+hex colors (256*256*256 = 16,777,216 colors )  -(hexa colors ex-#FFFFFF -First 2 letters for red,2nd for green third for blue)
+RGB (256*256*256 = 16,777,216 colors )— numeric values that describe a mix of red, green, and blue -(ex- rgb(23, 45, 23);)->color as red,green,blue.( here each show  a decimal value between 0 to 255)
+hex = rgb -because u select red green blue anyway --only in different format..like hex in one and decimal value 0 to 255 in other.
**The hexadecimal and RGB color system can represent many more colors than the small set of CSS named colors. We can use this new set of colors to refine our web page's style.

+HSL — numeric values that describe a mix of hue, saturation, and lightness 
https://www.khanacademy.org/partner-content/pixar/color/color-101/v/color-3
https://s3.amazonaws.com/codecademy-content/courses/learn-css-color/color_wheel_4_background.svg
color: hsl(120, 60%, 70%);
Hue is the first number. It refers to an angle on a color wheel. Red is 0 degrees, Green is 120 degrees, Blue is 240 degrees, and then back to Red at 360. You can see an example of a color wheel below:

Saturation(remove green and blue..when red,blue,green come together they form grey)refers to the intensity or purity of the color(adding grey). If you imagine a line segment drawn from the center of the color wheel to the perimeter, the saturation is a point on that line segment. If you spin that line segment to different angles, you'll see how that saturation looks for different hues. The saturation increases towards 100% as the point gets closer to the edge (the color becomes more rich). The saturation decreases towards 0% as the point gets closer to the center (the color becomes more gray).

Lightness(including more white or black) refers to how light or dark the color is. Halfway, or 50%, is normal lightness. Imagine a sliding dimmer on a light switch that starts halfway. Sliding the dimmer up towards 100% makes the color lighter, closer to white. Sliding the dimmer down towards 0% makes the color darker, closer to black.
-->
you can set opacity for color too
color: rgba(234, 45, 98, 0.33);
color: hsla(34, 100%, 50%, 0.1);
color: transparent;

color review-->
There are four ways to represent color in CSS:

Named colors — there are 147 named colors, which you can review here.

Hexadecimal or hex colors

Hexadecimal is a number system with has sixteen digits, 0 to 9 followed by "A" to "F".
Hex values always begin with # and specify values of red, blue and green using hexademical numbers such as #23F41A.
RGB

RGB colors use the rgb() syntax with one value for red, one value for blue and one value for green.
RGB values range from 0 to 255 and look like this: rgb(7, 210, 50).
HSL

HSL stands for hue (the color itself), saturation (the intensity of the color), and lightness (how light or dark a color is).
Hue ranges from 0 to 360 and saturation and lightness are both represented as percentages like this: hsl(200, 20%, 50%).
You can add opacity to color in RGB and HSL by adding a fourth value, a, which is represented as a percentage.

Great job! Feel empowered to add a bit of color to each of your projects!

---------
CSS TYPOGRAPHY

Typography is the art of arranging text on a page.

Text can appear in any number of weights, with the font-weight property.

Text can appear in italics with the font-style property.

The vertical spacing between lines of text can be modified with the line-height property.

Serif fonts have extra details on the ends of each letter. Sans-Serif fonts do not.

Fallback fonts are used when a certain font is not installed on a user's computer.

Google Fonts provides free fonts that can be used in an HTML file with the <link> tag or the @font-face property.

Local fonts can be added to a document with the @font-face property and the path to the font's source.

The word-spacing property changes how far apart individual words are.

The letter-spacing property changes how far apart individual letters are.

The text-align property changes the horizontal alignment of text.

---------->
GRIDS->
To turn an HTML element into a grid container, you must set the element's display property to grid (for a block-level grid) or inline-grid (for an inline grid). Then, you can assign other properties to lay out the grid.


*grid-template-columns:100px 100px (to create colmns -add as many columns you want) |grid-template-columns:50% 50% | grid-template-columns:1fr 2fr 1fr (3 columns where the middle column takes 2 portions of total avialable aka 50% -Make sure count matches to 4 PARTSS..PIZZA HAS 4 PARTS )
*grid-template-rows:100px 100px (to create rows -add as many rows you want) |grid-template-columns:50% 50% | grid-template-columns:1fr 2fr 1fr (3 rows where the middle row takes 2 portions of total avialable aka 50% -Make sure count matches to 4 PARTSS..PIZZA HAS 4 PARTS )
 *grid-template-rows: 5% 30% 10% repeat(3,1fr) repeat(2,1fr) 5%; (To include more rows, split the fourth value into three equal values. Use the same process to turn the fifth row into two new rows. Try to practice your refactoring on this one!)
 *   grid-template-rows: 20px repeat(5, 100px); (one row 20px and 5 rows at 100px each)
*grid-template:200px 300px / 20% 10% 70%;(combining rows and columns-here we have 2 rows at 200p amd 300px and 3 columns at 20% 10% 70%) ||  grid-template: 2fr 1fr 1fr / 1fr 3fr 1fr; (divided into 3 rows and colmns where row count or oclumn count equals 4)
  *grid-template-columns: repeat(3, 100px); (Makes life easy by saying add 3 columns wiht 100px size each)
  *grid-template: repeat(3, 1fr) / 3fr 50% 1fr; (auto make 3 rows with equal portions of givens space)
  *grid-template: repeat(3, 1fr) / repeat(3, 1fr); (auto make rows and columns)
  *  grid-template: repeat(3, 1fr) / 3fr minmax(50px,300px) 1fr; (tell max and min space for a specific column) //Here u cant have grid width as its auto decided
  *   grid-template-columns:25% 25% 2fr 1fr; (Structure the grid to have four columns — the first two each taking up 25% of the total width, the third column taking up two-thirds of the remaining space, and the last column taking up the last third of the remaining space.)
*grid-template-area
*grid-gap (Or) grid-row-gap / grid-column-gap  / grid-gap: 20px 10px; (rows is 20 and columns is 10) ||   grid-gap: 20px 5px; (add column fap and row gaps between rows and columns)
*grid-row-start / grid-row-end / grid-row:4/6(start at row4 and occupy till row 6.remember end will be give as +1(if end is at 5 we give 6))
*grid-column-start / grid-column-end /  grid-column: 4 / span 2; //  grid-column: 4 / 6;(start at column 4 and take 2 colums..see the before 2 syntax -one with span and one with 6-they are same)
 * grid-column: span 2 / 6; (here 0 is start point and add 2 to it as a start point -> so 2nd column) (start at 6-2 which is 4th column and end at 6th). SPAM AUTO adds or subracts
 * grid-column: 4 / span 2; (here 4 is start point)(start at 4th column and span 2 columns --end at 6th(4+2)= span added 2)
 * grid-column: 2 / span 6; (here 2 is start point )(start at 2nd column and span upto 6th column)
 * grid-row: 2 / span 3; ( make the item take up rows two through four.)start at column2 and take 3 colums from there
 *  grid-column: 1 / span 2; (here 1 is start point)(start at column1 and span 2 columns)
*grid-area (combine gried-row-start,grid-row-end and grid-colun-start and grid-column-end into one)
 *  grid-area: 2 / 3 / 4 / span 5;
 *  grid-area: 6 / 8 / span 3 / span 1; (start row a6 6 and span 3 rows from there..start colum at 8 and spam only one column(that is itself))
 grid-area takes four values separated by slashes. The order is important! This is how grid-area will interpret those values.
 grid-row-start
 grid-column-start
 grid-row-end
 grid-column-end

Row grid lines and column grid lines start at 1 and end at a value that is 1 greater than the number of rows or columns the grid has. For example, if a grid has 5 rows, the grid row lines range from 1 to 6. If a grid has 8 columns, the grid row lines range from 1 to 9.


Step1-> to define a div as grid add 'display:grid' in css

review->
grid-template-columns defines the number and sizes of the columns of the grid
grid-template-rows defines the number and sizes of the rows of the grid
grid-template is a shorthand for defining both grid-template-columns and grid-template-rows in one line
grid-gap puts blank space between rows and/or columns of the grid
grid-row-start and grid-row-end makes elements span certain rows of the grid
grid-column-start and grid-column-end makes elements span certain columns of the grid
grid-area is a shorthand for grid-row-start, grid-column-start, grid-row-end, and grid-column-end, all in one line
-------> grids advanced--> 
USING THESE YOU CAN CREATE CONTAINERS WHERE U CAN ADD DATA...VERY USEFUL

--> CSS advanced tags for styling grid items..
ROW Axis - justofy-content( for entire row) and justify-self(for individal rows)
space--even amount of space beyween grid items use - space-around
grid-template-areas (diide the areas into sections..same like pega containers)

**Justify-items and justify-content moves grid/grid items from LEFT to RIGHT
justify-items (set items inside grid rows to left,center,right..see below)
justify-content (set the entire grid to left,right,center,see below)


**ALIGN-ITEMS && ALIGN-CONTENT used to align grid or items to top /bottom or center 
align-items (set the exact item height a cell content can occupy inside grid..top to bottom )
align-content (set the entire grid to top  or bottom)

**The justify-items and align-items properties specify how all grid items contained within a single container will position themselves along the row and column axes, respectively.


**justify-self specifies how an individual element should position itself with respect to the row axis. This property will override justify-items for any item on which it is declared.
**align-self specifies how an individual element should position itself with respect to the column axis. This property will override align-items for any item on which it is declared.
justify-self
align-self

**GRID-AUTO-ROWS & COLUMNS used to specify size of dynamically added
grid-auto-rows
grid-auto-columns

**grid-auto-flow specifies whether new elements should be added to rows or columns. (row layout or column layout)
grid-auto-flow


-->
grid-template-areas - uSED TO NEATLY DIVIDE THE PAGE SPACE INTO SECTIONS..SAME LIKE PEGA CONTAINERS WE ADD BEFORE
ADD THIS to root container and define some names and use theose names in child section
for creating a html page like this-
 HEADER
 NAV
 Left|RIGHT
 Footer
 
 CSS->
.container {
  display: grid;
  max-width: 900px;
  position: relative;
  margin: auto;
  grid-template-areas: "head head"
                       "nav nav" 
                       "info services"
                       "footer footer";
  grid-template-rows: 300px 120px 800px 120px;
  grid-template-columns: 1fr 3fr; 
}

header {
  grid-area: head;
} 

  html->
  <div class="container">
  <header>Welcome!</header>
  <nav>Links!</nav>
  <section class="info">Info!</section>
  <section class="services">Services!</section>
  <footer>Contact us!</footer>
</div>
***************8HERE HEAD SETION IN HTML WILL OCCUPY 2 COLUMNS AS YOU added 'head head' twice******************%%%%%%%%%%%%%%%%%%%55$$$$$$$$$$$#########

--------> (use justify-items to align content inside grid rows to center -left-right)
check below link for all options
https://developer.mozilla.org/en-US/docs/Web/CSS/justify-items#Values
https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Box_Alignment_in_CSS_Grid_Layout#Justifying_Items_on_the_Inline_or_Row_Axis
justify-items is a property that positions grid items along the inline, or row, axis. This means that it positions items from left to right across the web page.

justify-items accepts these values:

start — aligns grid items to the left side of the grid area
end — aligns grid items to the right side of the grid area
center — aligns grid items to the center of the grid area
stretch — stretches all items to fill the grid area

html-
<main>
  <div class="card">Card 1</div>
  <div class="card">Card 2</div>
  <div class="card">Card 3</div>
</main>

css-
main {
  display: grid;
  grid-template-columns: repeat(3, 400px);
  justify-items: center;
}

------>justify-content (used to align the entire grid to center)
We can use justify-content to position the entire grid along the row axis.
https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Box_Alignment_in_CSS_Grid_Layout#Aligning_the_grid_tracks_on_the_block_or_column_axis
https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content#Values
It accepts these values:

start — aligns the grid to the left side of the grid container
end — aligns the grid to the right side of the grid container
center — centers the grid horizontally in the grid container
stretch — stretches the grid items to increase the size of the grid to expand horizontally across the container
space-around — includes an equal amount of space on each side of a grid element, resulting in double the amount of space between elements as there is before the first and after the last element
space-between — includes an equal amount of space between grid items and no space at either end
space-evenly — places an even amount of space between grid items and at either end

css-
main {
  display: grid;
  width: 1000px;
  grid-template-columns: 300px 300px;
  grid-template-areas: "left right"; 
  justify-content: center;
}

html-
<main>
  <div class="left">Left</div>
  <div class="right">Right</div>
</main>

--------->
align-items (if a column in a table  has unnecssary space(like extra space bottom or top) -we can trim that use this value too)
https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Box_Alignment_in_CSS_Grid_Layout#Aligning_items_on_the_block_or_column_Axis
https://developer.mozilla.org/en-US/docs/Web/CSS/justify-items#Values
align-items is a property that positions grid items along the block, or column axis. This means that it positions items from top to bottom.

align-items accepts these values:

start — aligns grid items to the top side of the grid area
end — aligns grid items to the bottom side of the grid area
center — aligns grid items to the center of the grid area
stretch — stretches all items to fill the grid area

html-
<main>
  <div class="card">Card 1</div>
  <div class="card">Card 2</div>
  <div class="card">Card 3</div>
</main>

css-
main {
  display: grid;
  grid-template-rows: repeat(3, 400px);
  align-items: center;
}

------------>
align-content
https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Box_Alignment_in_CSS_Grid_Layout#Aligning_the_grid_tracks_on_the_block_or_column_axis
https://developer.mozilla.org/en-US/docs/Web/CSS/align-content#Values
It accepts these positional values:

start — aligns the grid to the top of the grid container
end — aligns the grid to the bottom of the grid container
center — centers the grid vertically in the grid container
stretch — stretches the grid items to increase the size of the grid to expand vertically across the container
space-around — includes an equal amount of space on each side of a grid element, resulting in double the amount of space between elements as there is before the first and after the last element
space-between — includes an equal amount of space between grid items and no space at either end
space-evenly — places an even amount of space between grid items and at either end

ex->
<main>
  <div class="top">Top</div>
  <div class="bottom">Bottom</div>
</main>
main {
  display: grid;
  height: 600px;
  rows: 200px 200px;
  grid-template-areas: "top"
                       "bottom"; 
  align-content: center;
}
In the example above, the grid container is 600 pixels tall, but we only specified two rows that are 200 pixels each. This will leave 200 pixels of unused space in the grid container.
align-content: center; positions the rows in the center of the grid, leaving 100 pixels at the top and 100 pixels at the bottom of the grid.
This property is declared on grid containers.

--------->
Justify Self and Align Self
https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Box_Alignment_in_CSS_Grid_Layout#Aligning_the_grid_tracks_on_the_block_or_column_axis
https://developer.mozilla.org/en-US/docs/Web/CSS/align-self#Values
The justify-items and align-items properties specify how all grid items contained within a single container will position themselves along the row and column axes, respectively.

justify-self specifies how an individual element should position itself with respect to the row axis. This property will override justify-items for any item on which it is declared.

align-self specifies how an individual element should position itself with respect to the column axis. This property will override align-items for any item on which it is declared.

They both accept these four properties: 

start — positions grid items on the left side/top of the grid area
end — positions grid items on the right side/bottom of the grid area
center — positions grid items on the center of the grid area
stretch — positions grid items to fill the grid area (default)
align-self and justify-self accept the same values as align-items and justify-items. You can read about these values on the Mozilla Developer Network. The definitions for these values can also be found in the documentation. It is important to note that the page with the definitions includes some values that are not accepted in CSS Grid layout.
---->
Implicit vs. Explicit Grid

So far, we have been explicitly defining the dimensions and quantities of our grid elements using various properties. This works well in many cases, such as a landing page for a business that will display a specific amount of information at all times.

However, there are instances in which we don't know how much information we're going to display. For example, consider online shopping. Often, these web pages include the option at the bottom of the search results to display a certain quantity of results or to display ALL results on a single page. When displaying all results, the web developer can't know in advance how many elements will be in the search results each time.

What happens if the developer has specified a 3-column, 5-row grid (for a total of 15 items), but the search results return 30?

Something called the implicit grid takes over. The implicit grid is an algorithm built into the specification for CSS Grid that determines default behavior for the placement of elements when there are more than fit into the grid specified by the CSS.

The default behavior of the implicit grid is as follows: items fill up rows first, adding new rows as necessary. New grid rows will only be tall enough to contain the content within them. In the next exercise, you'll learn how to change this default behavior.

----->grid-auto-rows and grid-auto-columns
grid-auto-rows specifies the height of implicitly added grid rows. grid-auto-columns specifies the width of implicitly added grid columns.

grid-auto-rows and grid-auto-columns accept the same values as their explicit counterparts, grid-template-rows and grid-template-columns:

pixels (px)
percentages (%)
fractions (fr)
the repeat() function
-->
<body>
  <div>Part 1</div>   
  <div>Part 2</div>
  <div>Part 3</div>
  <div>Part 4</div>
  <div>Part 5</div>
</body>
body {
  display: grid;
  grid: repeat(2, 100px) / repeat(2, 150px); 
  grid-auto-rows: 50px;
}
------>
grid-auto-flow
grid-auto-flow specifies whether new elements should be added to rows or columns.

grid-auto-flow accepts these values:

row — specifies the new elements should fill rows from left to right and create new rows when there are too many elements (default)
column — specifies the new elements should fill columns from top to bottom and create new columns when there are too many elements
dense — this keyword invokes an algorithm that attempts to fill holes earlier in the grid layout if smaller elements are added
You can pair row and column with dense, like this: grid-auto-flow: row dense;.

------->
ADVANCED CSS GRID
Review
Great work! You have learned many new properties to use when creating a layout using CSS Grid! Let's review:

grid-template-areas specifies grid named grid areas
grid layouts are two-dimensional: they have a row, or inline, axis and a column, or block, axis.
justify-items specifies how individual elements should spread across the row axis
justify-content specifies how groups of elements should spread across the row axis
justify-self specifies how a single element should position itself with respect to the row axis
align-items specifies how individual elements should spread across the column axis
align-content specifies how groups of elements should spread across the column axis
align-self specifies how a single element should position itself with respect to the column axis
grid-auto-rows specifies the height of rows added implicitly to the grid
grid-auto-columns specifies the width of columns added implicitly to the grid
grid-auto-flow specifies in which direction implicit elements should be created
This is a great time to experiment with the code in the code editor and try any of the properties you want to practice more! When you're ready, move on!
